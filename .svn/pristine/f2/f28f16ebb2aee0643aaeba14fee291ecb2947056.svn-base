using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

public class Board : MonoBehaviour {
    public Sprite[] tokenPrefabs;
    public Sprite[] terrainPrefabs;
    public Sprite[] harbourPrefabs;
    public Player player;
    public Computer compPlayer1;
    public Computer compPlayer2;
    public Computer compPlayer3;

    public bool CheckForConnectingSettlements(GameObject roadSpot, Color color)
    {
        for (int j = 1; j < 55; j++)
        {
            GameObject settlementSpot = GameObject.Find("Settlement/City button " + j);
            float spotPosX            = roadSpot.GetComponent<RectTransform>().localPosition.x;
            float otherSpotPosX       = settlementSpot.GetComponent<RectTransform>().localPosition.x;
            float spotPosY            = roadSpot.GetComponent<RectTransform>().localPosition.y;
            float otherSpotPosY       = settlementSpot.GetComponent<RectTransform>().localPosition.y;

            float diffX = spotPosX - otherSpotPosX;
            float diffY = spotPosY - otherSpotPosY;

            bool isNeighbourXDir = (diffX > -35 && diffX < -25) || (diffX > 25 && diffX < 35) || (diffX > -5 && diffX < 5);
            bool isNeighbourYDir = (diffY > -35 && diffY < -25) || (diffY > 25 && diffY < 35) || (diffY > 10 && diffY < 20) || (diffY > -20 && diffY < -10);

            if (isNeighbourXDir && isNeighbourYDir && settlementSpot.GetComponent<Button>().colors.disabledColor == color)
            {
                return true;
            }
        }
        return false;
    }

    public bool CheckForConnectingRoads(GameObject spot, int type, bool initialRound1, bool initialRound2, Color color) //0 for comparing road to road, 1 for settlement to road
    {
        if (type == 1 && (initialRound1 || initialRound2)){ return true; }
        for (int i = 1; i < 73; i++)
        {
            GameObject otherRoadSpot = GameObject.Find("Road Button " + i);
            if (otherRoadSpot != spot)
            {
                float spotPosX      = spot.GetComponent<RectTransform>().localPosition.x;
                float otherSpotPosX = otherRoadSpot.GetComponent<RectTransform>().localPosition.x;
                float spotPosY      = spot.GetComponent<RectTransform>().localPosition.y;
                float otherSpotPosY = otherRoadSpot.GetComponent<RectTransform>().localPosition.y;

                float diffX = spotPosX - otherSpotPosX;
                float diffY = spotPosY - otherSpotPosY;
                bool isNeighbourXDir;
                bool isNeighbourYDir;
                if (type == 0)
                {
                    isNeighbourXDir = (diffX > -65 && diffX < -55) || (diffX > 55 && diffX < 65) || (diffX > -35 && diffX < -25) || (diffX > 25 && diffX < 35);
                    isNeighbourYDir = (diffY > -50 && diffY < -40) || (diffY > 40 && diffY < 50) || (diffY > -5 && diffY < 5);
                }
                else
                {
                    isNeighbourXDir = (diffX > -35 && diffX < -25) || (diffX > 25 && diffX < 35) || (diffX > -5 && diffX < 5);
                    isNeighbourYDir = (diffY > -35 && diffY < -25) || (diffY > 25 && diffY < 35) || (diffY > -20 && diffY < -10) || (diffY > 10 && diffY < 20);
                }


                if (isNeighbourXDir && isNeighbourYDir && otherRoadSpot.GetComponent<Button>().colors.disabledColor == color)
                {
                    return true;
                }
            }
        }
        return false;
    }

    public bool ObeysDistanceRule(GameObject settlementSpot)
    {
        for (int i = 1; i < 55; i++)
        {
            GameObject otherSettlementSpot = GameObject.Find("Settlement/City button " + i);
            if (otherSettlementSpot != settlementSpot)
            {
                float spotPosX      = settlementSpot.GetComponent<RectTransform>().localPosition.x;
                float otherSpotPosX = otherSettlementSpot.GetComponent<RectTransform>().localPosition.x;
                float spotPosY      = settlementSpot.GetComponent<RectTransform>().localPosition.y;
                float otherSpotPosY = otherSettlementSpot.GetComponent<RectTransform>().localPosition.y;

                float diffX = spotPosX - otherSpotPosX;
                float diffY = spotPosY - otherSpotPosY;

                bool isNeighbourXDir = (diffX > -65 && diffX < -55) || (diffX > 55 && diffX < 65) || (diffX > -5 && diffX < 5);
                bool isNeighbourYDir = (diffY > -65 && diffY < -55) || (diffY > 55 && diffY < 65) || (diffY > 25 && diffY < 35) || (diffY > -35 && diffY < -25);

                if (isNeighbourXDir && isNeighbourYDir && otherSettlementSpot.GetComponent<Image>().sprite.name != "UISprite")
                {
                    return false;
                }
            }
        }
        return true;
    }

    public GameObject GetSettlementConnectedWithRoad(GameObject roadSpot)
    {
        for (int j = 1; j < 55; j++)
        {
            GameObject settlementSpot = GameObject.Find("Settlement/City button " + j);
            float spotPosX            = roadSpot.GetComponent<RectTransform>().localPosition.x;
            float otherSpotPosX       = settlementSpot.GetComponent<RectTransform>().localPosition.x;
            float spotPosY            = roadSpot.GetComponent<RectTransform>().localPosition.y;
            float otherSpotPosY       = settlementSpot.GetComponent<RectTransform>().localPosition.y;

            float diffX = spotPosX - otherSpotPosX;
            float diffY = spotPosY - otherSpotPosY;

            bool isNeighbourXDir = (diffX > -35 && diffX < -25) || (diffX > 25 && diffX < 35) || (diffX > -5 && diffX < 5);
            bool isNeighbourYDir = (diffY > -35 && diffY < -25) || (diffY > 25 && diffY < 35) || (diffY > 10 && diffY < 20) || (diffY > -20 && diffY < -10);

            if (isNeighbourXDir && isNeighbourYDir && settlementSpot.GetComponent<Button>().colors.disabledColor == Color.red)
            {
                return settlementSpot;
            }
        }
        return null;
    }

    public void TurnAllSettlementPlacementsUninteractable()
    {
        for (int i = 1; i < 55; i++)
        {
            GameObject settlementSpot = GameObject.Find("Settlement/City button " + i);
            Button theButton = settlementSpot.GetComponent<Button>();
            theButton.interactable = false;
        }
    }

    public void TurnAllRoadPlacementsUninteractable()
    {
        for (int i = 1; i < 73; i++)
        {
            GameObject roadSpot = GameObject.Find("Road Button " + i);
            Button theButton = roadSpot.GetComponent<Button>();
            theButton.interactable = false;
        }
    }

    public int GetLongestRoad(int player)
    {
        Color playerColour = GetPlayerColour(player);
        return 0;
    }

    public Color GetPlayerColour(int player)
    {
        if      (player == 1) { return Color.red;    }
        else if (player == 2) { return Color.yellow; }
        else if (player == 3) { return Color.white;  }
        else if (player == 4) { return Color.blue;   }
        else                  { return Color.black;  }
    }

    public int GetAmountOfResourcesFromHex(GameObject hex, Color playerColour)
    {
        int amount = 0;
        for (int i = 1; i < 55; i++)
        {
            GameObject settlementSpot = GameObject.Find("Settlement/City button " + i);

            float spotPosX      = settlementSpot.GetComponent<RectTransform>().localPosition.x;
            float otherSpotPosX = hex.GetComponent<RectTransform>().localPosition.x;
            float spotPosY      = settlementSpot.GetComponent<RectTransform>().localPosition.y;
            float otherSpotPosY = hex.GetComponent<RectTransform>().localPosition.y;

            float diffX = spotPosX - otherSpotPosX;
            float diffY = spotPosY - otherSpotPosY;

            bool isNeighbourXDir = (diffX > -65 && diffX < -55) || (diffX > 55 && diffX < 65) || (diffX > -5 && diffX < 5);
            bool isNeighbourYDir = (diffY > -65 && diffY < -55) || (diffY > 55 && diffY < 65) || (diffY > -35 && diffY < -25) || (diffY > 25 && diffY < 35);
            if (isNeighbourXDir && isNeighbourYDir && settlementSpot.GetComponent<Button>().colors.disabledColor == playerColour)
            {
                if(settlementSpot.GetComponent<Image>().sprite.name == "Settlement White") { amount++;            }
                else                                                                       { amount = amount + 2; }
            }
        }
        return amount;
    }

    public void DeactivateRobberPlacementButtons()
    {
        for(int i = 1; i< 20; i++)
        {
            GameObject robberSpot = GameObject.Find("Move Robber Button " + i);
            robberSpot.GetComponent<Button>().interactable = false;
        }
    }

    public string GetOriginalToken(int counter) { return PlayerPrefsManager.GetToken(counter); }

    public void SetTokenToOriginal(int counter, string token) { GameObject.Find("Token " + counter).GetComponent<Image>().sprite = tokenPrefabs[GetIndexToken(token)]; }
    public void SetTokenToRobber(GameObject token)            { token.GetComponent<Image>().sprite = tokenPrefabs[10];                                                 }

    public int StealResource(GameObject hex, Color colour)
    {
        List<GameObject> listOfChoicesToStealFrom = new List<GameObject>();
        for (int i = 1; i < 55; i++)
        {
            GameObject settlementSpot = GameObject.Find("Settlement/City button " + i);

            float spotPosX      = settlementSpot.GetComponent<RectTransform>().localPosition.x;
            float otherSpotPosX = hex.GetComponent<RectTransform>().localPosition.x;
            float spotPosY      = settlementSpot.GetComponent<RectTransform>().localPosition.y;
            float otherSpotPosY = hex.GetComponent<RectTransform>().localPosition.y;

            float diffX = spotPosX - otherSpotPosX;
            float diffY = spotPosY - otherSpotPosY;

            bool isNeighbourXDir = (diffX > -65 && diffX < -55) || (diffX > 55 && diffX < 65) || (diffX > -5 && diffX < 5);
            bool isNeighbourYDir = (diffY > -65 && diffY < -55) || (diffY > 55 && diffY < 65) || (diffY > -35 && diffY < -25) || (diffY > 25 && diffY < 35);

            if (isNeighbourXDir && isNeighbourYDir 
                && settlementSpot.GetComponent<Button>().colors.disabledColor != colour 
                && CheckIfPlayerHasResourcesToGive(settlementSpot)) { listOfChoicesToStealFrom.Add(settlementSpot); }
        }

        int size = listOfChoicesToStealFrom.Count;
        int resource = -1;
        if(size != 0)
        {
            Color playerToStealFromColour = listOfChoicesToStealFrom[Random.RandomRange(0, size)].GetComponent<Button>().colors.disabledColor;
            resource = SelectResourceToSteal(playerToStealFromColour);
        }

        return resource;
    }

    bool CheckIfPlayerHasResourcesToGive(GameObject settlementSpot)
    {
        Color playerColour = settlementSpot.GetComponent<Button>().colors.disabledColor;
        if      (playerColour == Color.red)    { return player.GetTotalResourceCount()      > 0; }
        else if (playerColour == Color.yellow) { return compPlayer1.GetTotalResourceCount() > 0; }
        else if (playerColour == Color.white)  { return compPlayer2.GetTotalResourceCount() > 0; }
        else if (playerColour == Color.blue)   { return compPlayer3.GetTotalResourceCount() > 0; }
        else                                   { return false;                                   }
    }

    int SelectResourceToSteal(Color playerToStealFromColour)
    {
        int resource = Random.RandomRange(1, 6);
        if (playerToStealFromColour == Color.red)
        {
            while (!player.CheckIfGotOneResource(resource))      { resource = Random.RandomRange(1, 6); }
            player.GainOrLoseResource(resource, -1);
        }
        else if (playerToStealFromColour == Color.yellow)
        {
            while (!compPlayer1.CheckIfGotOneResource(resource)) { resource = Random.RandomRange(1, 6); }
            compPlayer1.GainOrLoseResource(resource, -1);
        }
        else if (playerToStealFromColour == Color.white)
        {
            while (!compPlayer2.CheckIfGotOneResource(resource)) { resource = Random.RandomRange(1, 6); }
            compPlayer2.GainOrLoseResource(resource, -1);
        }
        else if (playerToStealFromColour == Color.blue)
        {
            while (!compPlayer3.CheckIfGotOneResource(resource)) { resource = Random.RandomRange(1, 6); }
            compPlayer3.GainOrLoseResource(resource, -1);
        }
        else
        {
            resource = -1;
        }
        return resource;
    }

    public int GetAllOfSpecificResourceOthersHold(int playerNumber, int card)
    {
        int totalAmount = 0;
        if (playerNumber != 1) { totalAmount = totalAmount + player.GetAmountOfResource(card);      }
        if (playerNumber != 2) { totalAmount = totalAmount + compPlayer1.GetAmountOfResource(card); }
        if (playerNumber != 3) { totalAmount = totalAmount + compPlayer2.GetAmountOfResource(card); }
        if (playerNumber != 4) { totalAmount = totalAmount + compPlayer3.GetAmountOfResource(card); }
        return totalAmount;
    }

    public void MonopolyUsed(int playerNumber, int card)
    {
        if (playerNumber != 1) { player.LoseAllResourceMonopoly(card);      }
        if (playerNumber != 2) { compPlayer1.LoseAllResourceMonopoly(card); }
        if (playerNumber != 3) { compPlayer2.LoseAllResourceMonopoly(card); }
        if (playerNumber != 4) { compPlayer3.LoseAllResourceMonopoly(card); }
    }

    //--------------------------------------------------------------------------------------------------------
    //This is for setting up the board at the start of the game
    public void SetUpBoard()
    {
        for (int i = 1; i < 20; i++)
        {
            //get terrain tiles
            string terrain = PlayerPrefsManager.GetTerrainTile(i);
            GameObject.Find("Hex " + i).GetComponent<Image>().sprite = terrainPrefabs[GetIndexTerrain(terrain)];

            //get tokens
            string token = PlayerPrefsManager.GetToken(i);
            GameObject.Find("Token " + i).GetComponent<Image>().sprite = tokenPrefabs[GetIndexToken(token)];

            //save harbours
            if (i < 19)
            {
                string harbour = PlayerPrefsManager.GetHarbour(i);
                if (harbour == "null")
                {
                    GameObject.Find("Harbour " + i).GetComponent<Image>().enabled     = false;
                    GameObject.Find("Arrow " + i + "a").GetComponent<Image>().enabled = false;
                    GameObject.Find("Arrow " + i + "b").GetComponent<Image>().enabled = false;
                    if (GameObject.Find("Arrow " + i + "c")) { GameObject.Find("Arrow " + i + "c").GetComponent<Image>().enabled = false; }
                }
                else { GameObject.Find("Harbour " + i).GetComponent<Image>().sprite = harbourPrefabs[GetIndexHarbour(harbour)]; }
            }
        }
    }

    int GetIndexTerrain(string terrain)
    {
        if      (terrain == "Desert tile")   { return 0;  }
        else if (terrain == "Field tile")    { return 1;  }
        else if (terrain == "Forest tile")   { return 2;  }
        else if (terrain == "Hill tile")     { return 3;  }
        else if (terrain == "Mountain tile") { return 4;  }
        else if (terrain == "Pasture tile")  { return 5;  }
        else                                 { return -1; }
    }

    int GetIndexToken(string token)
    {
        if      (token == "2 token")  { return 0;  }
        else if (token == "3 token")  { return 1;  }
        else if (token == "4 token")  { return 2;  }
        else if (token == "5 token")  { return 3;  }
        else if (token == "6 token")  { return 4;  }
        else if (token == "8 token")  { return 5;  }
        else if (token == "9 token")  { return 6;  }
        else if (token == "10 token") { return 7;  }
        else if (token == "11 token") { return 8;  }
        else if (token == "12 token") { return 9;  }
        else if (token == "Robber")   { return 10; }
        else                          { return -1; }
    }

    int GetIndexHarbour(string harbour)
    {
        if      (harbour == "2 for 1 Brick")  { return 0;  }
        else if (harbour == "2 for 1 Grain")  { return 1;  }
        else if (harbour == "2 for 1 Lumber") { return 2;  }
        else if (harbour == "2 for 1 Ore")    { return 3;  }
        else if (harbour == "2 for 1 Wool")   { return 4;  }
        else if (harbour == "3 for 1 Any")    { return 5;  }
        else                                  { return -1; }
    }
}
